<?php

namespace Tests\Unit;

use Dividebuy\Payment\Contracts\Card;
use GuzzleHttp\Client;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\TestResponse;
use Illuminate\Http\JsonResponse;
//use Illuminate\Support\Facades\Request;
use Illuminate\Http\Request;
use Modules\Payment\Gateway\Sagepay\Deferred;
use Modules\Payment\Gateway\Sagepay\Payment;
use Modules\Payment\Gateway\Sagepay\VoidPayment;
use Psr\Http\Message\ResponseInterface;
use Tests\TestCase;

class DeferPaymentTest extends TestCase
{
    protected $payload;
    protected $err_payload;
    protected $requestHeaders;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->payload = json_decode(
            '{
                    "transactionType": "Defer",
                    "transactionId": "A66F7DC8-705F-0512-C149-62AB40304FD8",
                    "cardDetails":{
                        "cardholderName": "Bruce Lee Fong Kong",
                        "cardNumber": "4929000000006",
                        "expiryDate": "0320",
                        "securityCode": "123"
                    },
                    "vendorTxCode": "EC1V-12654-",
                    "amount": 6325,
                    "currency": "GBP",
                    "description": "Demo transaction",
                    "apply3DSecure": "UseMSPSetting",
                    "customerFirstName": "Bruce",
                    "customerLastName": "Lee",
                    "customerEmail": "sam@johns.co.uk",
                    "billingAddress": {
                        "address1": "407 St. John Street",
                        "city": "London",
                        "postalCode": "EC1V 4AB",
                        "country": "GB"
                    },
                    "entryMethod": "Ecommerce",
                    "key": "dzlSN2ZSOWYxenhnYXNTNWVjNDZia05vaTFsekFDNGlrV1pxa2gxZnFFa1Z6RkxsS0M6enVBRnVpckM1UEc0bEoyMlQzcmxCdDRXY1NmcTRpOWdyblJOcWpHWktYVGhDOFMwVmkwakt3V21tMHc2RGhZd2Q=",
                    "vendorName": "rematchtest",
                    "baseUrl": "https://pi-test.sagepay.com/api/v1/",
                    "paymentType": "void"
                    }',
            true);

        $this->requestHeaders = [
            "Authorization" => "Basic dzlSN2ZSOWYxenhnYXNTNWVjNDZia05vaTFsekFDNGlrV1pxa2gxZnFFa1Z6RkxsS0M6enVBRnVpckM1UEc0bEoyMlQzcmxCdDRXY1NmcTRpOWdyblJOcWpHWktYVGhDOFMwVmkwakt3V21tMHc2RGhZd2Q=",
            "Content-Type" => "application/json",
            "vendorName" => "rematchtest"
        ];

    }

    /**
     * A basic test example.
     *
     * @test
     *
     * @return void
     * @throws \Exception
     */
    public function testShouldBeAbleToMakePayment()
    {

        $response = $this->withHeaders($this->requestHeaders)->postJson('/api/payment/defer', $this->payload);

        $result = $response->decodeResponseJson();

        $this->assertArrayHasKey('statusDetail', $result);

        $this->assertEquals('The Authorisation was Successful.', $result['statusDetail']);

    }

    public function testPaymentValidationMissingFieldError() {

        unset($this->payload["customerFirstName"]);

        $response = $this->withHeaders($this->requestHeaders)->postJson('/api/payment/defer', $this->payload);

        $response->decodeResponseJson();

        dump($response->json('message'));

        $this->assertInstanceOf(TestResponse::class, $response);

        $this->assertEquals($response->json('message'), 'The gateway response did not contain all the mandatory fields [customerFirstName]');

    }

    public function testShouldErrWhenMakingPaymentWithoutAmount() {

        unset($this->payload["amount"]);

        $response = $this->withHeaders($this->requestHeaders)->postJson('/api/payment/defer', $this->payload);

        $result = $response->decodeResponseJson();

        $this->assertArrayHasKey('message', $result);

        $this->assertEquals('Undefined index: amount', $result['message']);

    }

    public function testSecurePaymentResponse() {

        $this->expectExceptionMessage('Undefined index: cardDetails');

        $request = new Request($this->payload);
        $request->headers->set("Authorization", "Basic dzlSN2ZSOWYxenhnYXNTNWVjNDZia05vaTFsekFDNGlrV1pxa2gxZnFFa1Z6RkxsS0M6enVBRnVpckM1UEc0bEoyMlQzcmxCdDRXY1NmcTRpOWdyblJOcWpHWktYVGhDOFMwVmkwakt3V21tMHc2RGhZd2Q=");
        $request->headers->set("vendorName", "rematchtest");

        $payment = new Deferred($request);

        $payment->deferredOrder(true);

        dump($payment);


    }

}
