<?php

namespace Tests\Unit;

use Dividebuy\Payment\Contracts\Card;
use GuzzleHttp\Client;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\TestResponse;
use Illuminate\Http\JsonResponse;
//use Illuminate\Support\Facades\Request;
use Illuminate\Http\Request;
use Modules\Payment\Gateway\Sagepay\Payment;
use Modules\Payment\Gateway\Sagepay\VoidPayment;
use Psr\Http\Message\ResponseInterface;
use Tests\TestCase;

class RepeatPaymentTest extends TestCase
{
    protected $payload;
    protected $err_payload;
    protected $requestHeaders;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->payload = json_decode(
            '{
                        "transactionType":"Repeat",
                        "referenceTransactionId": "5D639A87-1CA2-6DED-AEF6-66A640A68AD6",
                        "vendorTxCode":"REPEAT-EC1V-",
                        "amount":2000,
                        "currency":"GBP",
                        "description":"Great product repeated",
                        "shippingDetails":{
                            "recipientFirstName":"Sam",
                            "recipientLastName":"Jones",
                            "shippingAddress1":"407 St John Street",
                            "shippingCity":"London",
                            "shippingPostalCode":"EC1V 4AB",
                            "shippingCountry":"GB"
                        }
                    }',
            true);

        $this->requestHeaders = [
            "Authorization" => "Basic dzlSN2ZSOWYxenhnYXNTNWVjNDZia05vaTFsekFDNGlrV1pxa2gxZnFFa1Z6RkxsS0M6enVBRnVpckM1UEc0bEoyMlQzcmxCdDRXY1NmcTRpOWdyblJOcWpHWktYVGhDOFMwVmkwakt3V21tMHc2RGhZd2Q=",
            "Content-Type" => "application/json",
            "vendorName" => "rematchtest"
        ];

    }

    /**
     * A basic test example.
     *
     * @test
     *
     * @return void
     * @throws \Exception
     */
    public function testShouldBeAbleToMakeRepeatPayment()
    {

        $response = $this->withHeaders($this->requestHeaders)->postJson('/api/payment/repeat', $this->payload);

        $result = $response->decodeResponseJson();

        $this->assertArrayHasKey('statusDetail', $result);

        $this->assertEquals('The Authorisation was Successful.', $result['statusDetail']);

    }

    public function testPaymentValidationMissingFieldError() {

        unset($this->payload["amount"]);

        $response = $this->withHeaders($this->requestHeaders)->postJson('/api/payment/repeat', $this->payload);

        $response->decodeResponseJson();

        dump($response->json('message'));

        $this->assertInstanceOf(TestResponse::class, $response);

        $this->assertEquals($response->json('message'), 'The gateway response did not contain all the mandatory fields [amount]');

    }

}
